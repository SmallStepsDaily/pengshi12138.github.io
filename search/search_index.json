{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e2a\u4eba\u4ee5\u53ca\u9879\u76ee\u4ecb\u7ecd","text":"<p>Hi there \ud83d\udc4b</p> <p>\u672c\u7f51\u7ad9\u662f\u5bf9\u4e8e\u751f\u7269\u56fe\u50cf\u5904\u7406\u7a0b\u5e8f\u7684\u76f8\u5173\u6280\u672f\u4ecb\u7ecd\uff0c\u5305\u542b\u7a0b\u5e8f\u7684\u63a5\u53e3\u4ecb\u7ecd\u3001\u542f\u52a8\u63a5\u53e3\u548c\u76f8\u5173\u7b97\u6cd5\u7684\u8bf4\u660e\u3002</p> <p>\u8fd9\u662f\u7a0b\u5e8f\u9879\u76ee\u7f51\u7ad9SmallStepsDaily\u56fe\u50cf\u5904\u7406\u4ed3\u5e93\u3002</p> <p>\u8fd9\u662f\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9pengshi12138\u7684blog\u3002</p> <p></p>"},{"location":"FRET%E4%BA%9A%E7%BB%86%E8%83%9E%E5%99%A8%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","title":"\u7cfb\u7edf\u4ecb\u7ecd","text":""},{"location":"FRET%E4%BA%9A%E7%BB%86%E8%83%9E%E5%99%A8%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","title":"\u5618\uff01\u4fdd\u5bc6\uff0c\u4ee5\u540e\u7ed9\u4f60\u770b","text":""},{"location":"FRET%E6%98%8E%E5%9C%BA%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","title":"\u7cfb\u7edf\u4ecb\u7ecd","text":""},{"location":"FRET%E6%98%8E%E5%9C%BA%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","title":"\u5618\uff01\u4fdd\u5bc6\uff0c\u4ee5\u540e\u7ed9\u4f60\u770b","text":""},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/","title":"\u8f93\u5165\u56fe\u50cf\u6570\u636e\u547d\u540d\u89c4\u8303","text":""},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#1","title":"1.\u5b9e\u9a8c\u5e72\u6270\u7ec4\u547d\u540d","text":"<ul> <li>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5e72\u6270\u7ec4\u6587\u4ef6\u5939\u547d\u540d\u540d\u79f0 <code>{Metadata_cell}-{Metadata_treatment}-{Metadata_hour}-d{Metadata_dish}-c{Metadata_concentration}\u03bcm</code>\uff0c\u5176\u4e2d\u5404\u81ea\u5b9a\u4e49\u5982\u4e0b<ul> <li><code>Metadata_cell</code> \u8868\u793a\u7ec6\u80de\u7cfb\uff0c\u7528\u5b57\u7b26\u8868\u793a</li> <li><code>Metadata_treatment</code> \u8868\u793a\u5b9e\u9a8c\u7ec4\u5e72\u6270\uff0c\u7528\u5b57\u7b26\u8868\u793a</li> <li><code>Metadata_hour</code> \u8868\u793a\u5b9e\u9a8c\u65f6\u95f4\uff0c\u7528\u6570\u5b57\u8868\u793a</li> <li><code>Metadata_dish</code> \u8868\u793a\u4e0d\u540c\u76bf\uff0c\u7528\u6570\u5b57\u8868\u793a</li> <li><code>Metadata_concentration</code> \u8868\u793a\u5bf9\u5e94\u7684\u6d53\u5ea6\uff0c\u9ed8\u8ba4\u5355\u4f4d\u662f<code>\u03bcm</code></li> </ul> </li> </ul>"},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#2site","title":"2.\u89c6\u91cesite\u547d\u540d","text":"<ul> <li>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5728\u5e72\u6270\u7ec4\u6587\u4ef6\u5939\u4e0b\uff0c\u6309\u7167\u6570\u5b57\u7ec4\u6210\u4e0d\u540c\u89c6\u91ce\u7684\u56fe\u50cf\u96c6\uff0c\u540d\u79f0\u4e3a <code>{Metadata_site}</code> \uff0c\u503c\u5fc5\u987b\u4e3a\u6574\u6570\u6570\u5b57\u7c7b\u578b\u3002</li> </ul>"},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#3","title":"3.\u56fe\u50cf\u6587\u4ef6\u547d\u540d","text":"<ul> <li>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u56fe\u50cf\u547d\u540d\u9700\u8981\u7b26\u5408\u4e00\u5b9a\u89c4\u8303\u3002\u5728\u4e0d\u540c\u89c6\u91ce\u7684\u56fe\u50cf\u96c6\u4e0b\uff0c\u53ef\u4ee5\u5b58\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u53ef\u4ee5\u662f<ul> <li><code>DD\u3001DA\u3001AA</code> FRET\u4e09\u901a\u9053\u56fe\u50cf</li> <li><code>Mit</code> \u7ebf\u7c92\u4f53\u56fe\u50cf</li> <li><code>BF_1</code> \u660e\u573a\u56fe\u50cf\uff0c\u540e\u9762\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u62cd\u6444\u591a\u5f20\u56fe\u50cf\uff0c\u5982<code>BF_2</code>\u3001<code>BF_3</code></li> <li><code>Hoechst</code> \u7ec6\u80de\u6838\u56fe\u50cf</li> </ul> </li> </ul> <p>\u56fe\u50cf\u7684\u5b58\u50a8\u683c\u5f0f\u90fd\u4e3atif\u683c\u5f0f\uff0c16\u4f4d\u7684\u56fe\u50cf\u6570\u636e</p>"},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#4","title":"4. \u6b63\u5219\u5339\u914d\u516c\u5f0f","text":"<p>\u53ef\u4ee5\u7528\u4e8eCellProfiler\u6216\u8005Python\u7a0b\u5e8f\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\uff0c\u6240\u6709\u53c2\u6570\u9700\u8981\u6dfb\u52a0\u524d\u7f00 <code>Metadata_</code>\uff0c\u5982<code>Metadata_cell</code>\u3002 \u5177\u4f53\u6b63\u5219\u5339\u914d\u516c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>^.*\\\\(?P&lt;cell&gt;[A-Za-z0-9]+)-(?P&lt;treatment&gt;[A-Za-z0-9]+)-(?P&lt;hour&gt;\\d+(\\.\\d+)?)h-d(?P&lt;dish&gt;\\d{1,2})-c(?P&lt;concentration&gt;\\d+(\\.\\d+)?)\u03bcm\\\\(?P&lt;site&gt;[0-9]{1,2})$\n</code></pre>"},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#5","title":"5. \u4ee3\u7801\u5c55\u793a","text":""},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#51-cellprofiler","title":"5.1 Cellprofiler \u5339\u914d","text":"<p>\u5177\u4f53\u6d41\u7a0b\u4e3a\uff1a * \u70b9\u51fb\u542f\u7528\u5143\u6570\u636e\u8bb0\u5f55 * \u6dfb\u52a0\u6b63\u5219\u5339\u914d\u89c4\u5219 * \u63d0\u4ea4submit</p>"},{"location":"%E5%9B%BE%E5%83%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/#52-python","title":"5.2 Python \u4ee3\u7801\u6279\u5904\u7406","text":"<p>\u7b80\u5355\u6837\u4f8b\u5c55\u793a\u5982\u4e0b\u3002</p> <pre><code>def parse_batch_dir_string(input_string):\n    \"\"\"\n    \u4ece\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e2d\u89e3\u6790\u51fa cell, treatment \u548c hour \u7684\u503c\u3002\n    \u652f\u6301\u5c0f\u65f6\u90e8\u5206\u4e3a\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002\n\n    :param input_string: \u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a 'Cell-Treatment-Hour-d(Dish)-c(Concentration)ml'\n    :return: \u5305\u542b cell, treatment \u548c hour \u3001dish\u3001concentration\u952e\u503c\u5bf9\u7684\u5b57\u5178\n    \"\"\"\n    # \u5b9a\u4e49\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\uff0c\u652f\u6301\u6d6e\u70b9\u6570\n    pattern = r'^(?P&lt;cell&gt;[A-Za-z0-9]+)-(?P&lt;treatment&gt;[A-Za-z0-9]+)-(?P&lt;hour&gt;\\d+(\\.\\d+)?)h-d(?P&lt;dish&gt;\\d{1,2})-c(?P&lt;concentration&gt;\\d+(\\.\\d+)?)\u03bcm$'\n\n    match = re.match(pattern, input_string)\n\n    if match:\n        result = match.groupdict()\n        # \u6dfb\u52a0\u5e26\u6709 Metadata_ \u524d\u7f00\u7684\u65b0\u952e\uff0c\u5e76\u8f6c\u6362\u6570\u636e\u7c7b\u578b\n        metadata = {\n            'Metadata_cell': result['cell'],\n            'Metadata_treatment': result['treatment'],\n            'Metadata_hour': float(result['hour']) if result['hour'] else None,\n            'Metadata_dish': int(result['dish']) if result['dish'] else None,\n            'Metadata_concentration': float(result['concentration']) if result['concentration'] else None\n        }\n        return metadata\n    else:\n        raise ValueError(f\"\u8f93\u5165\u5b57\u7b26\u4e32 '{input_string}' \u4e0d\u7b26\u5408\u9884\u671f\u683c\u5f0f\u3002\")\n\nclass BatchProcessing:\n    \"\"\"\n    \u6279\u5904\u7406\u6d41\u7a0b\n    \"\"\"\n    def __init__(self, root):\n        # \u5355\u4e2a\u6279\u6b21\u6587\u4ef6\u8def\u5f84\n        self.root = root\n        self.batch_dir_list = []\n        self.current_Metadata_cell = ''\n        self.current_Metadata_site = ''\n        self.current_Metadata_hour = 0\n        self.current_Metadata_treatment = ''\n        self.current_Metadata_dish = 0\n        self.current_Metadata_concentration = 0\n        self.current_image_set_path = ''\n        # \u6700\u540e\u7684\u6279\u6587\u4ef6\n        self.current_batch_data_df = pd.DataFrame()\n\n    def start(self, process_function, *args, **kwargs):\n        \"\"\"\n        \u5f00\u59cb\u51fd\u6570\n        \"\"\"\n        self.batch_dir_list = list_immediate_subdirectories(self.root)\n        # \u904d\u5386\u540c\u4e2a\u5b9e\u9a8c\u4e0b\u4e0d\u540c\u6279\u6b21\u6587\u4ef6\n        for batch_dir in self.batch_dir_list:\n            Metadata = parse_batch_dir_string(batch_dir)\n            self.current_Metadata_cell = Metadata['Metadata_cell']\n            self.current_Metadata_hour = Metadata['Metadata_hour']\n            self.current_Metadata_treatment = Metadata['Metadata_treatment']\n            self.current_Metadata_dish = Metadata['Metadata_dish']\n            self.current_Metadata_concentration = Metadata['Metadata_concentration']\n            # \u83b7\u53d6\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u7684\u89c6\u91ce\u6587\u4ef6\u5939\u5217\u8868\n            batch_dir_path = str(os.path.join(self.root, batch_dir))\n            batch_site_dir_list = list_numeric_subdirectories(batch_dir_path)\n            # \u904d\u5386\u6279\u6b21\u6587\u4ef6\u5939\u4e0b\u7684\u4e0d\u540c\u89c6\u91ce\u6587\u4ef6\n            for batch_site_dir in batch_site_dir_list:\n                site_dir_path = str(os.path.join(batch_dir_path, batch_site_dir))\n                # \u9a8c\u8bc1\u6587\u4ef6\u5b8c\u6574\u6027\n                self.current_Metadata_site = int(batch_site_dir)\n                # \u5f00\u59cb\u4e1a\u52a1\u5904\u7406\n                process_function(site_dir_path, *args, **kwargs)\n\n</code></pre>"}]}